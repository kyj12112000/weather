/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-02-25 09:10:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("/*\r\n");
      out.write(" \tjQuery를 사용하는 중요한 이유중 하나가\r\n");
      out.write(" \t\tAJAX를 간편히 구현할수 있기 때문!\r\n");
      out.write(" \t\tAJAX를 브라우저 호환성 고민하지 않고 구현할수 있기 때문!\r\n");
      out.write(" \t\r\n");
      out.write(" \t실제 JavaScript 만으로 AJAX를 구현할경우, 브라우저 특성별 코드들을 만드는등 복잡한 과정 많음.\r\n");
      out.write(" \tjQuery 는 이를 간편화 하였다.\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write(" /*\r\n");
      out.write(" \tload() 함수\r\n");
      out.write(" \t$(selector).load(URL, data, callback);\r\n");
      out.write(" \t\r\n");
      out.write(" \t서버로부터 데이터를 읽어와서 select된 element 에 넣음\r\n");
      out.write(" \t\r\n");
      out.write(" \tURL:  request 할 url\r\n");
      out.write(" \tdata :  쿼리스트링에 해당하는 데이터  (key-value 쌍으로 이루어짐)\r\n");
      out.write(" \tcallback : load() 완료후 수행할 함수\r\n");
      out.write(" */ \r\n");
      out.write("/*\r\n");
      out.write(" Same Origin Policy (동일 출처 정책)\r\n");
      out.write("\t  어떤 출처에서 불러온 문서나 스크립트가 \r\n");
      out.write("\t  다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식\r\n");
      out.write("\t  참조 : https://developer.mozilla.org/ko/docs/Web/Security/Same-origin_policy\r\n");
      out.write("\r\n");
      out.write(" Chrome 은 위 Same Origin Policy 정책을 지키므로\r\n");
      out.write(" 예제를 실행할 경우 동작 안함. -> CORS 에러 (console 창에서 확인 가능)\r\n");
      out.write("\t  교차 출처 리소스 공유(Cross-Origin Resource Sharing, CORS)\r\n");
      out.write("\t  AJAX request 와 같이 추가적인 HTTP request 발생시\r\n");
      out.write("\t  실행중인 웹이 다른 출처의 자원에 접근할수 있도록 브라우저에 알려줌.\r\n");
      out.write("\t  response 하는 서버에서\r\n");
      out.write("\t  response 헤더에  Access-Control-Allow-Origin 헤더가 있으면 가능.\r\n");
      out.write("\r\n");
      out.write("\t  참조 : https://developer.mozilla.org/ko/docs/Web/HTTP/CORS\r\n");
      out.write("\t  \r\n");
      out.write(" ※ IE 및 이클립스 내장 브라우저에서는 동일출처정책을 까다롭게 적용안하므로 문제 없이 예제 동작함.\r\n");
      out.write("*/\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t\t\t\t// ※ 우선 아래 url 의 내용을 확인해보자\r\n");
      out.write("\t\tvar url = \"https://www.w3schools.com/jquery/demo_test.txt\";  \r\n");
      out.write("\t\r\n");
      out.write("\t\t// 예제를 위해서 서버에서 돌려야 한다  ( request 이기 때문)\r\n");
      out.write("\t    $(\"#btn01\").click(function(){\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t$(\"#div1\").load(url);\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    });\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// jQuery selector 를 붙이는 것도 가능!\r\n");
      out.write("\t    $(\"#btn02\").click(function(){\r\n");
      out.write("\t    \t$(\"#div1\").load(url + \" #p1\")        // \"https://www.w3schools.com/jquery/demo_test.txt #p1\"\r\n");
      out.write("\t    });\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// callback 함수는 3개의 parameter 받는다\r\n");
      out.write("\t\t//    responseTxt : AJAX request 성공하면 받은 내용\r\n");
      out.write("\t\t//    statusTxt : AJAX request status 내용\r\n");
      out.write("\t\t//    xhr : XMLHttpRequest object\r\n");
      out.write("\t    $(\"#btn03\").click(function(){\r\n");
      out.write("\t        $(\"#div1\").load(url, \r\n");
      out.write("\t        \t\tfunction(responseTxt, statusTxt, xhr){\r\n");
      out.write("\t\t\t            if(statusTxt == \"success\")\r\n");
      out.write("\t\t\t                alert(\"성공\\n\" + xhr.status + \"\\n\" + xhr.statusText);\r\n");
      out.write("\t\t\t            if(statusTxt == \"error\")\r\n");
      out.write("\t\t\t                alert(\"에러\\n\" + xhr.status + \"\\n\" + xhr.statusText);\r\n");
      out.write("\t\t\t        });\t    \t\r\n");
      out.write("\t    });\r\n");
      out.write("});\r\n");
      out.write(" \r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"div1\">\r\n");
      out.write("<h2>jQuery AJAX</h2>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<button id=\"btn01\">btn01 load()</button>\r\n");
      out.write("<button id=\"btn02\">btn02 load(selector)</button>\r\n");
      out.write("<button id=\"btn03\">btn03 load(func)</button>\r\n");
      out.write("\r\n");
      out.write("<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
